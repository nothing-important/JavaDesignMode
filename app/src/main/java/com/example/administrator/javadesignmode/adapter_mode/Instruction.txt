适配器模式

定义：
适配器模式把一个类的接口变换为另一个类所期待的接口，从而使原本因接口不匹配而无法一起工作
的两个类能够在一起工作。

定义阐述：
适配器提供客户类需要的接口，适配器的实现就是把客户类的请求转化为对适配者的相应接口的调用。
也就是说：当客户类调用适配器的方法时，在适配器的内部将调用适配者类的方法，而这个过程对客户
类是透明的，客户类并不直接访问适配者类。因此，适配器可以使由于接口不兼容而不能交互的类一起
工作。这就是适配器模式的动机。

适配器模式结构：
类的适配器模式、对象的适配器模式

类适配和对象适配模式的优缺点：
1.类适配器使用对象的继承方式，是静态的定义方式；对象适配器使用对象组合的方式，是动态组合方式
2.对于类适配器模式，由于适配器直接继承了Adaptee，使得适配器不能和Adaptee的子类一起工作，
因为继承是静态的关系，当适配器继承了Adaptee后，就不可能再去处理Adaptee的子类了
3.对于对象适配器模式，一个适配器可以把多种不同的源适配到同一个目标。也就是说，同一个适配器可
以把源类和它的子类都适配到目标接口。因为对象适配器采用的是对象组合的关系，只要对象类型正确，
是不是子类都无所谓
4.对于类适配器模式，适配器可以重新定义Adaptee的部分行为，即子类重写父类的函数
5.对于对象适配器模式，重新定义Adaptee的行为比较困难，这种情况下，需要定义Adaptee的子类来
实现重定义，然后让适配器组合子类。虽然重定义Adaptee的行为比较困难，当时想要增加新的行为比较
方便，而且新增的行为适用于所有的源
6.对于类适配器模式，仅仅引入了一个对象，并不需要额外的引用来简介得到Adaptee
7.对于对象适配器，需要额外的引用来间接得到Adaptee
建议尽量使用对象适配器的实现方式，多用合成/聚合、少用继承。当然，具体问题具体分析，根据需要来选用实现方式，最适合的才是最好的。