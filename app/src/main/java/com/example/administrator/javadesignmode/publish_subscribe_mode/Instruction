观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题
对象在状态上发生变化时，会通知所有观察者对象，使他们能够自动更新自己。

观察者模式涉及角色：

抽象主题角色（Subject）：把所有对观察者对象的引用保存在一个聚集中（比如ArrayList），每个主题都
可以有任意数量的观察者。抽象主题提供一个接口，可以增加和删除观察者对象，抽象主题角色又叫抽象被观察者角色（Observable）

具体主题角色（ConcreteSubject）：将有关状态存入具体观察者对象；在具体主题的内部状态改变时，给所有登记
过的观察者发出通知。具体主题角色又叫做具体被观察者角色（ConcreteObservable）

抽象观察者角色（Observer）：为所有的具体观察者定义一个接口，在得到主题对象的通知时更新自己，这个接口叫做更新接口

具体观察者角色（ConcreteObserver）：具体观察者角色实现抽象观察者角色所要求的更新接口，
以便使本身的状态与主题的状态相协调。如果需要，具体观察者角色可以保持一个指向具体主题对象的引用。



观察者模式的两种模型：推模型/拉模型

推模型：主题对象向观察者推送主题的更新信息，不管观察者是否需要，推送的信息通常是主题的全部或部分数据
拉模型：
主题对象在通知观察者的时候，只传递少量消息。如果观察者需要更具体的消息，由观察者主动到主题对象中获取，
相当于是观察者从主题对象中拉取数据。一般这种模式的实现中，会把主题对象自身通过update()函数传递给
观察者，这样在观察者需要获取数据时，就可以通过这个引用来获取了

两种模式比较：
推模型是假定主题对象知道观察者需要的数据；而拉模型是主题对象不知道观察者需要什么数据，在没有办法的情况
下，干脆把自身传递给观察者，让观察者自己按需取值
推模型可能会使得观察者对象难以复用，因为观察者的update()函数内的参数是按照需要定义的参数，无法兼顾所有
情况。这就意味着出现新情况的时候，就需要提供新的update()函数，或者是重新实现观察者；而拉模型就不会造成
这种情况，在拉模型下update()函数的参数是主题对象本身，这基本上是主题对象能够传递的最大数据集合了，基本
上可以适应各种情况